/**
 *------
 * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>
 * loveletter implementation : © <Your name here> <Your email address here>
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 *
 * loveletter.css
 *
 * loveletter stylesheet
 *
 */

/*
    This is the CSS stylesheet of your game User Interface.
    
    Styles defined on this file will be applied to the HTML elements you define in your
    HTML template (loveletter_loveletter.tpl), and to HTML elements you create dynamically
    (in loveletter.js).
    
    Usually, you are using CSS to:
    
    1°) define the overall layout of your game
        (ex: place the board on the top left, place player's hand beside, place the deck on the right, ...).

    2°) create your CSS-sprites:
        All images of your games should be gathered into a small number of image files. Then, using
        background-image and background-position CSS properties, you create HTML blocks that can 
        display these images correctly (see example below).
    
    3°) ... anything else:
        It is really easy to add and remove CSS classes dynamically from your Javascript with
        dojo.addClass and dojo.removeClass. It is also easy to check if an element has a class
        (dojo.hasClass) or to get all elements with a specific class (dojo.query). This is why,
        very often, using CSS classes for the logic of your user interface allow you to do complex
        thing easily.
        
        
     Note: on the production platform, this file will be compressed and comments will be removed.
           Consequently, don't hesitate to put as many comments as necessary.
*/

@import url(../../../css/csslayer.css); /* Note: you must not use any @import directive other than this one */

/********* You can start writing your CSS below this line: **********/

@import url(../../../css/csslayer.css);

:root {
  --card-width: 410px;
  --card-height: 560px;
  --card-scale: 0.4; /*TODO make deck-card-scale*/
  --deck-card-scale: 0.25;
  --hand-card-scale: 0.35;
  --sprite-cols: 6;
  --sprite-rows: 2;
  --badge-grid-cols: 4;
  --badge-grid-rows: 6;
  --badge-width: 36px; 
  --badge-height: 36px;
  --badge-gap: 0px;

  /* Scaled total sprite size */
  --sprite-width: calc(var(--card-width) * var(--sprite-cols) * var(--card-scale));
  --sprite-height: calc(var(--card-height) * var(--sprite-rows) * var(--card-scale));
}


html, body {
    height: 100%;
    margin: 0;
    padding: 0;
}

#lvt-background {
    background-image: url(img/background.jpg);
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    position: fixed;
    z-index: -1;
}

#lvt-play-area {
    position: relative;
    margin: 50px;
    width: 100%;
    height: 100vh;
}

#lvt-table {
    position: relative;
    margin: 50px;
    width: 100%;
    height: 100%;
}

#lvt-center-area {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  min-height: 150px;
  min-width: 400px;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

#lvt-badges-area {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  padding: 10px;
  background: #fff8;
  border-radius: 12px;
  box-shadow: 0 2px 8px #0002;
  min-width: calc(var(--badge-grid-cols) * var(--badge-width) + (var(--badge-grid-cols) - 1) * var(--badge-gap)); /* Extra space for padding/borders */
}

.lvt-badge-grid {
  display: grid;
  grid-auto-flow: row;
  grid-template-columns: repeat(var(--badge-grid-cols), var(--badge-width));
  grid-auto-rows: var(--badge-height);
  gap: var(--badge-gap);
  min-width: calc(var(--badge-grid-cols) * var(--badge-width) + (var(--badge-grid-cols) - 1) * var(--badge-gap));
}

#lvt-deck-area {
  position: relative;
  width: 100px;
  height: 120px;
  margin-right: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
}

#lvt-deck {
  width: calc(var(--card-width) * var(--deck-card-scale));
  height: calc(var(--card-height) * var(--deck-card-scale));
  background-image: url('img/cards.jpg');
  background-size: var(--sprite-width) var(--sprite-height);
  background-position: 
  calc(-4 * var(--card-width) * var(--deck-card-scale)) 
  calc(-1 * var(--card-height) * var(--deck-card-scale));
  background-repeat: no-repeat;
  border-radius: 12px;
}


#lvt-playertables {
    position: absolute;
    margin: 250px;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

.lvt-playertable {
    position: absolute;
    width: calc(1.8 * var(--card-width) * var(--card-scale) + 12px);
    height: calc(var(--card-height) * var(--card-scale) + 12px);
    background: #fff8;
    border: 1px solid #333;
    border-radius: 8px;
    text-align: center;
    padding: 6px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    z-index: 2;
    transform: translate(-50%, -50%);
}

.selectedOpponent {
    outline: 4px red solid;
}

.lvt-player-name {
    margin-bottom: 10px;
}

.lvt-player-card {
    position: relative;
}

.lvt-hand {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    --sprite-width: calc(var(--card-width) * var(--sprite-cols) * var(--hand-card-scale));
    --sprite-height: calc(var(--card-height) * var(--sprite-rows) * var(--hand-card-scale));
}

.lvt-hand .lvt-card-back {
    position: static;
    width: calc(var(--card-width) * var(--hand-card-scale));
    height: calc(var(--card-height) * var(--hand-card-scale));
    background-position: 
        calc(-4 * var(--card-width) * var(--hand-card-scale)) 
        calc(-1 * var(--card-height) * var(--hand-card-scale));
    margin: 0 auto;
}

.stockitem {
    border-radius: 8px;
    box-shadow: 5px 5px 5px #656565;
}

.lvt-card-back {
  position: absolute;
  width: calc(var(--card-width) * var(--deck-card-scale));
  height: calc(var(--card-height) * var(--deck-card-scale));
  background-image: url('img/cards.jpg');
  background-size: var(--sprite-width) var(--sprite-height);
  background-position: 
  calc(-4 * var(--card-width) * var(--card-scale)) 
  calc(-1 * var(--card-height) * var(--card-scale));
  background-repeat: no-repeat;
  border-radius: 12px;
}

#played-cards-badges {
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #fff8;
  border-radius: 12px;
  padding: 10px 10px 10px 10px;
  box-shadow: 0 2px 8px #0002;
  position: absolute; /* to position in center easily */
  left: 60%; /* tune for your table */
  top: 48%;
  transform: translate(-50%, -50%);
  z-index: 10;
}

.lvt-badge-row {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 4px;
  min-width: 140px;
}

.lvt-card-badge {
  width: 36px;
  height: 36px;
  border-radius: 6px;
  display: inline-block;
  opacity: 0.3;
  margin: 2px;
  transition: opacity 0.2s, box-shadow 0.2s;
  background-repeat: no-repeat;
  background-position-y: 0;
  background-size: auto 36px; /* or 100% 100% for forced fit, but this is best for proportional */
}
.lvt-card-badge.played {
  opacity: 1;
}
